// Character patterns for each letter (larger version)
const letterPatterns = {
  A: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  B: [
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,1,1,1,1,1,0,0]
  ],
  C: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0]
  ],
  D: [
    [1,1,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,1,1,1,1,0,0,0]
  ],
  E: [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1]
  ],
  F: [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0]
  ],
  G: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0]
  ],
  H: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  I: [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1]
  ],
  J: [
    [0,0,0,0,0,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,0,0],
    [0,0,0,0,0,1,1,1,0,0],
    [0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,1,1,1,1,0,0,0],
    [0,1,1,1,1,1,0,0,0,0]
  ],
  K: [
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,0,1,1,1,0,0,0],
    [1,1,1,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,1,1,1,0,0,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  L: [
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1]
  ],
  M: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,1,0,0,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,1,1,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  N: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,1,1,1],
    [1,1,1,1,1,0,0,1,1,1],
    [1,1,1,1,1,1,0,1,1,1],
    [1,1,1,0,1,1,1,1,1,1],
    [1,1,1,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  O: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0]
  ],
  P: [
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0]
  ],
  Q: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,1,0,1,1,1],
    [1,1,1,0,0,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,1,1]
  ],
  R: [
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,1,1,1,0,0],
    [1,1,1,0,0,0,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  S: [
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,0,0],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0]
  ],
  T: [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0]
  ],
  U: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0]
  ],
  V: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,0,0,1,1,1,0],
    [0,1,1,1,0,0,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,0,1,1,0,0,0,0]
  ],
  W: [
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  X: [
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,0,0,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,1,1,1,1,1,1,0,0],
    [0,1,1,1,0,0,1,1,1,0],
    [1,1,1,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,1,1,1]
  ],
  Y: [
    [1,1,1,0,0,0,0,1,1,1],
    [0,1,1,1,0,0,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,0,0,0]
  ],
  Z: [
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,1,0],
    [0,0,0,0,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,0,0,0],
    [0,0,1,1,1,1,0,0,0,0],
    [0,1,1,1,1,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1]
  ],
  ' ': [
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0],
    [0,0,0]
  ]
};

function generateTextCoordinates(text) {
  const coordinates = [];
  let currentX = 0;
  
  // Convert text to uppercase since our patterns are defined for capital letters
  text = text.toUpperCase();
  
  for (let i = 0; i < text.length; i++) {
    const letter = text[i];
    if (letterPatterns[letter]) {
      const pattern = letterPatterns[letter];
      
      // Convert pattern to coordinates
      for (let y = 0; y < pattern.length; y++) {
        for (let x = 0; x < pattern[y].length; x++) {
          if (pattern[y][x] === 1) {
            coordinates.push({
              xcoordinate: currentX + x,
              ycoordinate: y,
              character: "â–ˆ"
            });
          }
        }
      }
      
      // Move x position for next letter (pattern width + 2 spaces)
      currentX += pattern[0].length + 2;
    }
  }
  
  return coordinates;
}

// Helper function to visualize the output
function visualizeCoordinates(coordinates) {
  if (coordinates.length === 0) return '';
  
  // Find the dimensions of the output
  const maxX = Math.max(...coordinates.map(c => c.xcoordinate)) + 1;
  const maxY = Math.max(...coordinates.map(c => c.ycoordinate)) + 1;
  
  // Create an empty grid
  const grid = Array(maxY).fill().map(() => Array(maxX).fill(' '));
  
  // Fill in the coordinates
  coordinates.forEach(({xcoordinate, ycoordinate, character}) => {
    grid[ycoordinate][xcoordinate] = character;
  });
  
  // Convert to string
  return grid.map(row => row.join('')).join('\n');
}

// Test example
const testText = "HELLO WORLD";
const coordinates = generateTextCoordinates(testText);
// console.log("Coordinates:", coordinates);
console.log("\nVisualization:");
console.log(visualizeCoordinates(coordinates));
